import { settings, run, flush } from '@oclif/core';
import Bugsnag from '@bugsnag/js';
import { output, environment, error } from '@shopify/cli-kit';

var version = "3.0.20";

function runCLI() {
  output.initiateLogging({ filename: "shopify.cli.log" });
  if (environment.local.isDebug()) {
    settings.debug = true;
  } else {
    Bugsnag.start({
      apiKey: "9e1e6889176fd0c795d5c659225e0fae",
      logger: null,
      appVersion: version,
      autoTrackSessions: false
    });
  }
  run(void 0, import.meta.url).then(flush).catch((error$1) => {
    if (error$1 instanceof error.AbortSilent) {
      process.exit(1);
    }
    const kitMapper = error.mapper;
    const kitHandle = error.handler;
    return kitMapper(error$1).then(bugsnagHandle).then((error2) => {
      return kitHandle(error2);
    }).then(() => {
      process.exit(1);
    });
  });
}
const bugsnagHandle = async (errorToReport) => {
  if (!settings.debug && error.shouldReport(errorToReport)) {
    const reportedError = Object.assign(Object.create(errorToReport), {});
    if (reportedError.stack)
      reportedError.stack = reportedError.stack.replace(new RegExp("file:///", "g"), "/");
    await new Promise((resolve, reject) => {
      Bugsnag.notify(reportedError, void 0, resolve);
    });
  }
  return Promise.resolve(errorToReport);
};

export { runCLI as default };
//# sourceMappingURL=index.js.map
